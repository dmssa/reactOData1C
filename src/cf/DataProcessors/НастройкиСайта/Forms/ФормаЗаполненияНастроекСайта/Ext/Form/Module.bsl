
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	КоллекцияМетаданных = ПолучитьЗаполненныеМетаданныеНаСервере();
	
	Имена = Новый Массив(КоллекцияМетаданных.Количество());
	Для Индекс = 0 По КоллекцияМетаданных.ВГраница() Цикл
		Имена[Индекс] = КоллекцияМетаданных[Индекс].Имя;
	КонецЦикла;
	
	Массив = ПолучитьСоставСтандартногоИнтерфейсаOData();
	НастройкиСайта = ЗаполняемыеНастройкиСайта();
	Для Индекс = 0 По НастройкиСайта.ИменаКоллекций.ВГраница() Цикл
		Название    = НастройкиСайта.ИменаКоллекций[Индекс];
		НоваяСтрока = АктивныеОбъекты.Добавить();
		НоваяСтрока.ДанныеOData = НастройкиСайта.НазванияКоллекций[Индекс];
		Для каждого ОбъектМетаданных Из Массив Цикл
			Путь = СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".");
			Если Путь.Количество() > 0 Тогда
				Имя = Путь[1];
				Если Имя = Название Тогда
					ИндексИмя = Имена.Найти(Путь[0]);
					Если ИндексИмя = Неопределено Тогда
						ВызватьИсключение("Не найдена коллекция метаданных " + Путь[0]);
					КонецЕсли; 
					НоваяСтрока.КоллекцияМетаданных = КоллекцияМетаданных[ИндексИмя].Коллекция;
					НоваяСтрока.ОбъектКонфигурации  = Имя;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	АдресСервера = "http://localhost/"; 
КонецПроцедуры

&НаСервере
Функция ЗаполняемыеНастройкиСайта()
	Результат = Новый Структура("ИменаКоллекций
							    | ,НазванияКоллекций
							    | ,JSONИменаКоллекций
							    | ,ЗначенияАдресов
							    | ,JSONИменаАдресов");
	Результат.ИменаКоллекций     = СтрРазделить(
		"Номенклатура,ЦеныНоменклатуры,ВидыНоменклатуры",",");
	Результат.НазванияКоллекций  = СтрРазделить(
		"Номенклатура,Цены номенклатуры,Виды номенклатуры",",");
	Результат.JSONИменаКоллекций = СтрРазделить(
		"goods,prices,goodsTypes",",");
	Результат.ЗначенияАдресов    = СтрРазделить(
		",odata/standard.odata/",",");
	Результат.JSONИменаАдресов   = СтрРазделить(
		"host,api",",");
	//  host = АдресСервера(http://localhost/)
	//       + ИмяСервера(Администрирование\Публикация на веб-сервере\Основные\Имя) 
	//       + "/"
	Возврат Результат;
КонецФункции


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Массив = ПолучитьЗаполненныеМетаданныеНаСервере();
	ОбновитьСписокВыбора(Массив, Элементы.АктивныеОбъектыКоллекцияМетаданных.СписокВыбора);
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьКоллекциюМетаданныхНаСервере()
	Результат = Новый Массив();
	Названия = "Коллекция,Имя,Name";
	Результат.Добавить(Новый Структура(Названия,"Справочники",	"Справочник",	"Catalog"));
	Результат.Добавить(Новый Структура(Названия,"Документы",	"Документ",		"Document"));
	Результат.Добавить(Новый Структура(Названия,"Константы",	"Константа",	"Constant"));
	Результат.Добавить(Новый Структура(Названия,"ПланыОбмена",	"ПланОбмена",	"ExchangePlan"));
	Результат.Добавить(Новый Структура(Названия,"ПланыСчетов",	"ПланСчетов",	"ChartOfAccounts"));
	Результат.Добавить(Новый Структура(Названия,"Задачи",		"Задача",		"Task"));
	Результат.Добавить(Новый Структура(Названия,"ЖурналыДокументов",	"ЖурналДокументов",	"DocumentJournal"));
	Результат.Добавить(Новый Структура(Названия,"ПланыВидовРасчета",	"ПланВидовРасчета",	"ChartOfCalculationTypes"));
	Результат.Добавить(Новый Структура(Названия,"РегистрыСведений",		"РегистрСведений",	"InformationRegister"));
	Результат.Добавить(Новый Структура(Названия,"РегистрыНакопления",	"РегистрНакопления","AccumulationRegister"));
	Результат.Добавить(Новый Структура(Названия,"РегистрыРасчета",		"РегистрРасчета",	"CalculationRegister"));
	Результат.Добавить(Новый Структура(Названия,"БизнесПроцессы",		"БизнесПроцесс",	"BusinessProcess"));
	Результат.Добавить(Новый Структура(Названия,"РегистрыБухгалтерии",		"РегистрБухгалтерии",		"AccountingRegister"));
	Результат.Добавить(Новый Структура(Названия,"ПланыВидовХарактеристик",	"ПланВидовХарактеристик",	"ChartOfCharacteristicTypes"));
	
	Возврат Результат;
	
	//Результат = "Справочники,Документы,РегистрыСведений,РегистрыНакопления,РегистрыРасчета,РегистрыБухгалтерии";
	//Результат = Результат + "БизнесПроцессы,ЖурналыДокументов,Задачи,КритерииОтбора,ОбщиеФормы,Отчеты,Обработки,ПланыОбмена";
	//Результат = Результат + "Перечисления,ПланыВидовХарактеристик,ПланыСчетов,ПланыВидовРасчета";
	//
	//Возврат СтрРазделить(Результат, ",");
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗаполненныеМетаданныеНаСервере()
	Коллекция = ПолучитьКоллекциюМетаданныхНаСервере();
	Индекс = 0;
	Пока Индекс < Коллекция.Количество() Цикл
		Строка = Коллекция[Индекс];
		Если Метаданные[Строка.Коллекция].Количество() = 0 Тогда
			Коллекция.Удалить(Индекс);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Коллекция;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокМетаданныхНаСервере(ПутьМетаданных)
	Массив = Новый Массив();
	Коллекция = Метаданные[ПутьМетаданных];
	Для каждого КлЗнч Из Коллекция Цикл
		Массив.Добавить(КлЗнч.Имя);
	КонецЦикла; 
	Возврат Массив;
КонецФункции


&НаКлиенте
Процедура АктивныеОбъектыОбъектКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Строка = Элементы.АктивныеОбъекты.ТекущиеДанные;
	Массив = ПолучитьСписокМетаданныхНаСервере(Строка.КоллекцияМетаданных);
	СписокЗначений = Элементы.АктивныеОбъектыОбъектКонфигурации.СписокВыбора;
	СписокЗначений.Очистить();
	Для каждого Имя Из Массив Цикл
		СписокЗначений.Добавить(Имя, Имя);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура АктивныеОбъектыОбъектКонфигурацииПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбора(Массив, СписокЗначений)
	СписокЗначений.Очистить();
	Для каждого Коллекция Из Массив Цикл
		СписокЗначений.Добавить(Коллекция.Коллекция, Коллекция.Имя);
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура АктивныеОбъектыКоллекцияМетаданныхПриИзменении(Элемент)
	Строка = Элементы.АктивныеОбъекты.ТекущиеДанные;
	Строка.ОбъектКонфигурации = "";
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОбъектыOData(Команда)
	Если Не ЗначениеЗаполнено(ИмяСервера) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнено значение";
		Сообщение.Поле = "ИмяСервера";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПутьККорневомуКаталогу) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнено значение";
		Сообщение.Поле = "ПутьККорневомуКаталогу";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	ЗаписатьНастройкиСайта();
	ЗаписатьФайлыСайта(Новый ОписаниеОповещения("ИзменитьОбъектыODataЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОбъектыODataЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьСоставИнтерфейсаOData();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставИнтерфейсаOData()	
	Массив = Новый Массив();
	Для Каждого Путь Из АктивныеОбъекты Цикл
		Если ЗначениеЗаполнено(Путь.КоллекцияМетаданных) 
			И ЗначениеЗаполнено(Путь.ОбъектКонфигурации) Тогда
			ОбъектМетаданных = Метаданные[Путь.КоллекцияМетаданных][Путь.ОбъектКонфигурации];
		    Массив.Добавить(ОбъектМетаданных); 
		КонецЕсли; 
	КонецЦикла;
    УстановитьСоставСтандартногоИнтерфейсаOData(Массив);
	Модифицированность = Ложь;
КонецПроцедуры
&НаСервере
Процедура ЗаписатьНастройкиСайта()
	КоллекцияМетаданных = ПолучитьКоллекциюМетаданныхНаСервере();
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.ОткрытьФайл(ПутьККорневомуКаталогу + "conf.json", , , ПараметрыЗаписиJSON);
		
	Настройки = ЗаполняемыеНастройкиСайта();
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	Для Индекс = 0 По Настройки.JSONИменаАдресов.ВГраница() Цикл
		Адрес = Настройки.JSONИменаАдресов[Индекс];
		ЗаписьJSON.ЗаписатьИмяСвойства(Адрес);
		Если Адрес = "host" Тогда
			ЗаписьJSON.ЗаписатьЗначение(АдресСервера + ИмяСервера + "/");
		Иначе
			ЗаписьJSON.ЗаписатьЗначение(Настройки.ЗначенияАдресов[Индекс]);
		КонецЕсли; 
	КонецЦикла; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("url");
	
	ТЗ = АктивныеОбъекты.Выгрузить();
	Отбор = Новый Структура("ДанныеOData");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	Для Индекс = 0 По Настройки.JSONИменаКоллекций.ВГраница() Цикл
		ИмяJSON = Настройки.JSONИменаКоллекций[Индекс];
		ЗаписьJSON.ЗаписатьИмяСвойства(ИмяJSON);
		Отбор.ДанныеOData = Настройки.НазванияКоллекций[Индекс];
		Строка = ТЗ.НайтиСтроки(Отбор);
		Если Строка.Количество() = 0 Тогда
			ВызватьИсключение( "Не найдена запись в " 
				+ Настройки.НазванияКоллекций[Индекс] 
				+ "Данных OData" );
		Иначе
			Строка = Строка[0];
		КонецЕсли;
		ЗначениеЗаписано = Ложь;
		Для каждого Стр Из КоллекцияМетаданных Цикл
			Если Стр.Коллекция = Строка.КоллекцияМетаданных Тогда
				ЗаписьJSON.ЗаписатьЗначение(Стр.Name + "_" + Строка.ОбъектКонфигурации);
				ЗначениеЗаписано = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если Не ЗначениеЗаписано Тогда
			ВызватьИсключение( "Коллекция метаданных не найдена" );
		КонецЕсли; 
	КонецЦикла; 
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.Закрыть();	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлыСайта(Знач Оповещение)
	Адрес = ПолучитьФайлыСайтаНаСервере();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	ДвоичныеДанные.Записать(ИмяФайлаАрхива);
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
	ЧтениеZipФайла.ИзвлечьВсе(ПутьККорневомуКаталогу,);
	
	НачатьУдалениеФайлов(, ИмяФайлаАрхива);
КонецПроцедуры


&НаСервере
Функция ПолучитьФайлыСайтаНаСервере()
	ДвоичныеДанные = Обработки.НастройкиСайта.ПолучитьМакет("Сайт");
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные
										, ЭтаФорма.УникальныйИдентификатор);
	Возврат Адрес;									
КонецФункции
 
 
 
&НаКлиенте
Процедура ПутьККорневомуКаталогуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    ДиалогВыбораПапки = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
    ДиалогВыбораПапки.Показать(Новый ОписаниеОповещения("ПутьККорневомуКаталогуЗавершениеВыбора", ЭтотОбъект)); 
КонецПроцедуры

&НаКлиенте
Процедура ПутьККорневомуКаталогуЗавершениеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    Если ВыбранныеФайлы.Количество() > 0 Тогда
        ПутьККорневомуКаталогу = ВыбранныеФайлы[0] + "\";
    КонецЕсли;
КонецПроцедуры
